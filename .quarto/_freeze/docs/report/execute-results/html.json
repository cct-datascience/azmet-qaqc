{
  "hash": "345b68eaab8d75961232b296177f5d0c",
  "result": {
    "markdown": "---\ntitle: \"Report\"\nformat: \n  html:\n    code-fold: true\n    toc: true\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(fabletools)\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: timechange\n\nAttaching package: 'lubridate'\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\ntar_load(c(\n  fc_sol_rad,\n  daily_test,\n  daily_train\n))\n```\n:::\n\n\nLet's pretend there is an outlier in the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily_test <- \ndaily_test |> select(meta_station_id, everything()) |> \n  mutate(sol_rad_total = if_else(meta_station_id == \"az01\", 30, sol_rad_total))\n```\n:::\n\n\nWhat would be cool here is a table with variable name and check or red x for pass or fail QA.\nThese would have links to relevant sections below with plots and tables.\n\n## Solar Radiation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsol_fc <- \n  fc_sol_rad |>\n  hilo(c(95, 99)) |> \n  select(-sol_rad_total, -.model) |> \n  mutate(across(where(~inherits(., \"hilo\")), ~round(., 3)))\nsol_test <- daily_test |>\n  select(sol_rad_total)\nsol_train <- daily_train |> \n  select(sol_rad_total)\n\nsol_qa <- \n  right_join(\n  sol_fc,\n  sol_test,\n  by = c(\"meta_station_id\", \"meta_station_name\", \"datetime\")\n) |> \n  mutate(flag = case_when(\n    sol_rad_total < `99%`$lower ~ \"extreme\",\n    sol_rad_total > `99%`$upper ~ \"extreme\",\n    sol_rad_total < `95%`$lower ~ \"outlier\",\n    sol_rad_total > `95%`$upper ~ \"outlier\"\n  )) |> \n    select(meta_station_id, meta_station_name, datetime, sol_rad_total, forecast = .mean, flag)\n\nsol_qa |> filter(!is.na(flag))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 1 x 6 [?]\n# Key:       meta_station_id, meta_station_name [1]\n  meta_station_id meta_station_name datetime   sol_rad_total forecast flag   \n  <chr>           <chr>             <date>             <dbl>    <dbl> <chr>  \n1 az01            Tucson            2022-11-07            30     15.0 extreme\n```\n:::\n:::\n\n\nFilter by stations with flags and only plot those.\nOr maybe embed a simple shiny app that lets you view different stations?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#extract stations with flags\nsol_qa_stations <- \n  sol_qa |> \n  filter(!is.na(flag)) |> \n  pull(meta_station_id)\n\n\n\n# filter forecast\nfc_sol_rad |> \n  filter(meta_station_id %in% sol_qa_stations) |> \n  autoplot(\n    #with training data\n    sol_train |>\n      #filter to show only past few weeks of data\n      filter(datetime > max(datetime) - weeks(3)),\n    level = c(95, 99)\n  ) +\n  geom_point(\n    data = sol_test  |> \n      #filter stations\n      filter(meta_station_id %in% sol_qa_stations),\n    aes(y = sol_rad_total), shape = \"triangle\", size = 1, color = \"red\"\n  ) +\n  labs(caption= \"blue dot = forecast point, red triangle = actual data\")\n```\n\n::: {.cell-output-display}\n![](report_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Temperature\n\nrepeat with temperature\n",
    "supporting": [
      "report_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}