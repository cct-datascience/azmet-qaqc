---
title: "ARIMA models"
format: html
editor: visual
---

# Auto ARIMA

ARIMA models can have varying numbers of parameters.
`ARIMA`, by default, identifies the best ARIMA model by AICc.
We can just let it do its thing for all the variables maybe and then to re-fit the same kind of ARIMA model for future data, we can use `refit()`.

```{r}
library(targets)
library(fable)
library(tidyverse)
library(lubridate)
```

## Load data

As an example I'll use data up to 2022 to fit the initial ARIMA model and then re-fit to the whole dataset.

```{r}
tar_load(daily)

daily <- daily |> 
  select(temp_air_meanC) |> 
  tsibble::tsibble(key = meta_station_id) |> 
  select(-meta_station_name) |> 
  filter(meta_station_id %in% c("az01", "az02", "az07"))


# split the data
train <- daily |>  filter(datetime < ymd("2020-01-01"))
```

## Fit ARIMA

This fits an ARIMA model for `temp_air_meanC` for each station with no external predictors.
The only thing we don't want it to estimate is the seasonality, which should be a year.
It is relatively fast if we don't specify the seasonal period, but it usually estimates it as not being seasonal, or having a seasonal period of 7 days for some reason.
Specifying the seasonal period as 365 makes it suuuuper slow.

```{r}
fit <- train |> 
  model(ARIMA(temp_air_meanC ~ 1 + PDQ(period = 365)))
fit |> filter(meta_station_id == "az01") |> report()
```

Because it fits a different ARIMA model for each station, it may find a different "best" model for each station.
In this case, however, they're all `ARIMA(1,0,1)(0,1,0)[365] w/ drift` which means...

```{r}
refit1 <- fit |> refit(daily)
refit1 |>  filter(meta_station_id == "az01") |> report()

refit2 <- fit |> refit(daily, reestimate = TRUE)
refit2 |>  filter(meta_station_id == "az01") |> report()
```
